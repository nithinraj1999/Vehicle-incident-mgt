// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ==============================
// ENUMS
// ==============================
enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  @@map("incident_severities")
}

enum IncidentStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
  @@map("incident_statuses")
}

enum IncidentType {
  ACCIDENT
  BREAKDOWN
  THEFT
  VANDALISM
  MAINTENANCE_ISSUE
  TRAFFIC_VIOLATION
  FUEL_ISSUE
  OTHER
  @@map("incident_types")
}

enum IncidentUpdateType {
  STATUS_CHANGE
  ASSIGNMENT
  COMMENT
  COST_UPDATE
  RESOLUTION
  @@map("incident_update_types")
}

// ==============================
// MAIN MODELS
// ==============================

model Incident {
  id              Int              @id @default(autoincrement())
  carId           Int
  reportedById    Int
  assignedToId    Int?

  title           String
  description     String
  severity        IncidentSeverity @default(LOW)
  status          IncidentStatus   @default(PENDING)
  type            IncidentType

  location        String?
  latitude        Float?
  longitude       Float?
  occurredAt      DateTime
  reportedAt      DateTime         @default(now())

  carReadingId    Int?
  images          String[]
  documents       String[]

  resolutionNotes String?
  estimatedCost   Float?
  actualCost      Float?
  resolvedAt      DateTime?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  car             Car              @relation(fields: [carId], references: [id])
  reportedBy      User             @relation("IncidentReporter", fields: [reportedById], references: [id])
  assignedTo      User?            @relation("IncidentAssignee", fields: [assignedToId], references: [id])
  carReading      CarReading?      @relation(fields: [carReadingId], references: [id])
  updates         IncidentUpdate[]

  @@index([carId])
  @@index([reportedById])
  @@index([assignedToId])
  @@index([status])
  @@index([severity])
  @@index([occurredAt])
  @@map("incidents")
}

model IncidentUpdate {
  id          Int      @id @default(autoincrement())
  incidentId  Int
  userId      Int
  message     String
  updateType  IncidentUpdateType
  createdAt   DateTime @default(now())

  // Relations
  incident    Incident @relation(fields: [incidentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([incidentId])
  @@index([userId])
  @@map("incident_updates")
}

// ==============================
// RELATED MODELS
// ==============================

model User {
  id                 Int       @id @default(autoincrement())
  name               String
  email              String    @unique
  role               String    

  // Incident Relations
  incidentsReported  Incident[] @relation("IncidentReporter")
  incidentsAssigned  Incident[] @relation("IncidentAssignee")
  incidentUpdates    IncidentUpdate[]
}

model Car {
  id           Int       @id @default(autoincrement())
  vin          String    @unique
  licensePlate String
  make         String
  model        String
  year         Int

  incidents    Incident[]
  readings     CarReading[]
}

model CarReading {
  id          Int       @id @default(autoincrement())
  carId       Int
  reading     Int       
  readingAt   DateTime

  incidents   Incident[]

  car         Car       @relation(fields: [carId], references: [id])
}
